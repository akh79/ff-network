using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ff_neural_net
{
    //
    // Class MNISTReader generated by MS Copilot on 07.07.2025
    //
    // All images are placed in (numberOfImages, rows*cols) jagged array of floats.
    // Each row contains a full single image with same ordering as in the data file.
    // Byte values are converted to floats: byte value / 255.
    // 
    // All labels are converted to one-hot encoded vectors and placed
    // in (numberOfLabels, 10) jagged array of floats.
    //
    // MNIST data can be obtained from: https://github.com/cvdfoundation/mnist
    //
    // A different but similar approach using lazy evaluation through IEnumerable can be
    // found here:  https://stackoverflow.com/questions/49407772/reading-mnist-database
    //

    /*
     TRAINING SET IMAGE FILE (train-images-idx3-ubyte):
     [offset] [type]          [value]          [description] 
     0000     32 bit integer  0x00000803(2051) magic number 
     0004     32 bit integer  60000            number of images 
     0008     32 bit integer  28               number of rows 
     0012     32 bit integer  28               number of columns 
     0016     unsigned byte   ??               pixel 
     0017     unsigned byte   ??               pixel 
     ........ 
     xxxx     unsigned byte   ??               pixel
     Pixels are organized row-wise. Pixel values are 0 to 255.
     0 means background (white), 255 means foreground (black). 
 */

    internal static class BinaryReaderExtensions
    {
        public static int ReadInt32BigEndian(this BinaryReader br)
        {
            byte[] bytes = br.ReadBytes(sizeof(int));
            if (BitConverter.IsLittleEndian)
                Array.Reverse(bytes);
            return BitConverter.ToInt32(bytes, 0);
        }
    }

    internal class MNISTReader
    {
        internal static (float[][] images, int rows, int cols) ReadImages(string filePath)
        {
            using (var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            using (var br = new BinaryReader(fs))
            {
                // Read magic number and dimensions
                int magicNumber = br.ReadInt32BigEndian();
                if (magicNumber != 2051) // 0x00000803 for images
                    throw new Exception("Invalid magic number for MNIST image file.");

                int numberOfImages = br.ReadInt32BigEndian();
                int rows = br.ReadInt32BigEndian();
                int cols = br.ReadInt32BigEndian();

                float[][] imageData = new float[numberOfImages][];

                for (int i = 0; i < numberOfImages; ++i)
                {
                    imageData[i] = new float[rows * cols];

                    for (int j = 0; j < rows * cols; ++j)
                    {
                        byte pixel = br.ReadByte();
                        imageData[i][j] = (float)pixel / 255f;
                    }
                }

                return (imageData, rows, cols);
            }
        }

        internal static float[][] ReadLabels(string filePath)
        {
            using (var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            using (var br = new BinaryReader(fs))
            {
                // Read magic number and number of labels
                int magicNumber = br.ReadInt32BigEndian();
                if (magicNumber != 2049) // 0x00000801 for labels
                    throw new Exception("Invalid magic number for MNIST label file.");

                int numberOfLabels = br.ReadInt32BigEndian();

                // Labels take values in 0..9
                float[][] labelData = new float[numberOfLabels][];

                for (int i = 0; i < numberOfLabels; ++i)
                {
                    labelData[i] = new float[10];
                    byte label = br.ReadByte();
                    labelData[i][label] = 1f;
                }

                return labelData;
            }
        }
    }
}
